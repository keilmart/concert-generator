{"version":3,"sources":["Header.js","Results.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","weHaveATarget","e","preventDefault","console","log","target","value","setState","userChoice","state","filteredArray","className","action","onChange","this","name","id","onClick","props","getArtistProp","Component","Results","fourConcerts","map","chosenEvent","_embedded","venues","dates","start","localDate","localTime","src","images","url","StopPosition","ShowAtPosition","EasingType","AnimationDuration","ContainerClassName","TransitionClassName","style","ToggledStyle","Footer","href","App","getArtist","choiceOfGenre","allMusicVenues","filter","event","classifications","genre","slice","finalArray","scroller","scrollTo","duration","smooth","loading","axios","method","dataResponse","params","apikey","format","city","classificationName","sort","size","then","responsePlaceholder","data","events","class","type","color","height","width","timeout","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.956402fd.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Header.css\";\n//      -   Whatever the user clicks on, we will save that selection in the state.App //\n//      -   On submit, we pass the users selction to App.js through a function that was passed down in props. //\n//      -  We need a constructor in order to set state  //\n\nclass Header extends Component {\n  constructor() {\n    super();\n    this.state = {\n      userChoice: \"\",\n      filteredArray: [],\n    };\n  }\n  // this can go anywhere, as long as its not inside of a life cycle statment //\n  weHaveATarget = (e) => {\n    e.preventDefault();\n    console.log(e.target.value);\n\n    // We're saving it into state //\n    this.setState({\n      userChoice: e.target.value,\n      // It wont run until setState has finished ///\n    });\n  };\n\n  render() {\n    return (\n      <header>\n        <div className=\"wrapper backer\">\n          <h1>Toronto's Upcoming Concert Generator</h1>\n          <h2>Populate An Up To Date Concert List Based On Genre Selection </h2>\n        </div>\n        <form action=\"\">\n          <select\n            onChange={this.weHaveATarget}\n            name=\"whichVenue\"\n            id=\"whichVenue\"\n          >\n            <option value=\"\">Music Genres...</option>\n            {/* <option value=\"KnvZfZ7vAvv\">Alternative</option> */}\n            <option value=\"KnvZfZ7vAv6\">Country</option>\n            <option value=\"KnvZfZ7vAvF\">Dance/Electronic</option>\n            {/* <option value=\"KnvZfZ7vAva\">Folk</option> */}\n            <option value=\"KnvZfZ7vAv1\">Hip-Hop</option>\n            <option value=\"KnvZfZ7vAev\">Pop</option>\n            <option value=\"KnvZfZ7vAee\">R&B</option>\n            <option value=\"KnvZfZ7vAeA\">Rock</option>\n          </select>\n          <button\n            // onClick={(e) => window.alert('No Concerts Booked Due to Covid! - Please check back at a later date.')\n            // }\n          onClick={(e) => this.props.getArtistProp(e, this.state.userChoice)}\n          >\n            Find My Artist\n          </button>\n        </form>\n      </header>\n    );\n  }\n}\n\nexport default Header;\n","import React, { Component } from \"react\";\nimport ScrollUpButton from \"react-scroll-up-button\";\nimport \"./Results.css\";\n\nclass Results extends Component {\n  constructor() {\n    super();\n  }\n\n  render() {\n    return (\n      <div className=\"Results\">\n        <main>\n          <ul className=\"wrapper container\">\n            {this.props.fourConcerts.map((chosenEvent) => {\n              return (\n                <li className=\"imgBacker\">\n                  <h2>{chosenEvent.name}</h2>\n                  <h3>{chosenEvent._embedded.venues[0].name}</h3>\n                  <h4>{chosenEvent.dates.start.localDate} ðŸ“…</h4>\n                  <h4>{chosenEvent.dates.start.localTime} ðŸ•“</h4>\n                  <div className=\"imgHold\">\n                    <img src={chosenEvent.images[5].url} />\n                  </div>\n                </li>\n              );\n            })}\n          </ul>\n          <ScrollUpButton\n            StopPosition={0}\n            ShowAtPosition={150}\n            EasingType=\"easeOutCubic\"\n            AnimationDuration={500}\n            ContainerClassName=\"ScrollUpButton__Container\"\n            TransitionClassName=\"ScrollUpButton__Toggled\"\n            style={{}}\n            ToggledStyle={{}}\n          />\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default Results;\n","\nimport React from 'react';\nimport './Footer.css';\n\nconst Footer = () => {\n    return (\n        <footer>\n            <div className=\"wrapper\">\n                <p>Developed By <a href=\"http://www.keil.ca\">Keil Martin</a>, Using <a href=\"https://developer.ticketmaster.com/products-and-docs/apis/getting-started/\">The Ticketmaster API</a>, Juno 2019</p>\n            </div>\n        </footer>\n    )\n}\n\nexport default Footer;","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport axios from \"axios\";\nimport Header from \"./Header.js\";\nimport Results from \"./Results.js\";\nimport Footer from \"./Footer\";\nimport Loader from 'react-loader-spinner'\nimport { scroller } from \"react-scroll\";\n\n\n// - Order of Operations - //\n// Access the TicketMaster API, and get all the events//\n// Get back the data and parse for what I want //\n// Save the data to \"state\" //\n// Get user selection of which genre of music they are interested in / /\n// Filter the concerts for just those in the selected genre //\n// Filter that group of concerts and return one random selection //\n// Print the coneerts name, venue, localDate, localTime //\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      // this is where we're saving the data\n      allMusicVenues: [],\n      filteredArray: [],\n      finalArray: [],\n      loading: true,\n    };\n  }\n\n  // hooking into component, we do our api call here because this is the last of the life cycle, (first the constructor, then the render lastly this - aka the lifecycle). we call it here because we don't want to load the api if there is no page to render to. But we don't always do our API call here, this is just an instance)\n  componentDidMount() {\n    axios({\n      url: `https://app.ticketmaster.com/discovery/v2/events.json`,\n      method: `GET`,\n      dataResponse: `json`,\n      params: {\n        apikey: `1upokxsDOkQ6x4imtBWNcDKUEuuagvna`,\n        format: `json`,\n        city: `toronto`,\n        classificationName: `music`,\n        sort: `date,asc`,\n        size: `200`,\n      },\n    })\n      // Get back the data and parse for what I want, I pass a callback function because thats a set of steps that we tell what to do // .data goes into the array //\n      .then((responsePlaceholder) => {\n        // this is saving the data into set state.App // this refers to the component that we are inside of // every time setState runs, it re renders the page // We are grabbing the allMusicVenues from above, which is set to an empty array //\n        this.setState({\n          allMusicVenues: responsePlaceholder.data._embedded.events,\n          loading: false,\n        });\n      });\n  }\n\n  getArtist = (e, choiceOfGenre) => {\n    e.preventDefault();\n\n    const originalArray = [...this.state.allMusicVenues];\n\n    let subArray = originalArray.filter((event) => {\n      return event.classifications[0].genre.id === choiceOfGenre;\n    });\n\n    let filteredArray = subArray.slice(0, 8)\n\n    this.setState({\n      finalArray: filteredArray,\n    });\n\n    scroller.scrollTo(\"Results\", {\n      duration: 1200,\n      smooth: true,\n    });\n  };\n\n  render() {\n    if (this.state.loading) {\n      return <div class=\"loadScreen\"><Loader\n        type=\"Puff\"\n        color=\"#00BFFF\"\n        height={100}\n        width={100}\n        timeout={6000} //5 secs\n\n      /></div>;\n    }\n    return (\n      <div className=\"App\">\n        <Header getArtistProp={this.getArtist} />\n        <Results fourConcerts={this.state.finalArray} />\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}